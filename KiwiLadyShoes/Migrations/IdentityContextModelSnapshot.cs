// <auto-generated />
using System;
using KiwiLadyShoes.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KiwiLadyShoes.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KiwiLadyShoes.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "287ecbd5-f271-48c4-95fc-047019a2c7ff",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2023, 11, 1, 18, 23, 52, 586, DateTimeKind.Local).AddTicks(8244),
                            ConcurrencyStamp = "c5714837-a0c6-4d84-b329-0fe56491da62",
                            Email = "administrator@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@EXAMPLE.COM",
                            NormalizedUserName = "ADMINISTRATOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG2ePCbvWTHAF1gH2J89xLK5ZPsabfPrpNDef0JVAypGrApeBoyqOaRtTZn51f5VOg==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d306345-584a-4fd9-bfb0-b303cc5311a6",
                            TwoFactorEnabled = false,
                            UserName = "administrator@example.com"
                        },
                        new
                        {
                            Id = "ebc72d8e-0672-486c-a870-5deb6491d00b",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2023, 11, 1, 18, 23, 52, 586, DateTimeKind.Local).AddTicks(8292),
                            ConcurrencyStamp = "f5e2cf22-5889-4037-a08c-ea3e32c23d68",
                            Email = "manager@example.com",
                            EmailConfirmed = true,
                            FirstName = "manager",
                            LastName = "manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "MANAGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDahkMFyb7X/xycUrRObQF1HkDU44GZoJmcu5/ifUSp0tqLBeLG/o+LDAB0vtfdXVw==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ad819d5-1b9b-424b-af96-657e08f872b5",
                            TwoFactorEnabled = false,
                            UserName = "manager@example.com"
                        },
                        new
                        {
                            Id = "0548a2e3-86f9-491c-9875-4874cc9bf698",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2023, 11, 1, 18, 23, 52, 586, DateTimeKind.Local).AddTicks(8304),
                            ConcurrencyStamp = "51ac23fb-d6d1-4250-bcc0-654b96bd9cf8",
                            Email = "salesperson@example.com",
                            EmailConfirmed = true,
                            FirstName = "salesperson",
                            LastName = "salesperson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALESPERSON@EXAMPLE.COM",
                            NormalizedUserName = "SALESPERSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxU1VN/nOGfE7msaZLeAHDwC85I8Mnhy8NbV6ZGy0M7sFbzjL6Oo/9SA8VDQBWR2A==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "357cd227-6e09-4fec-be76-acf63f1952c2",
                            TwoFactorEnabled = false,
                            UserName = "salesperson@example.com"
                        },
                        new
                        {
                            Id = "23b1433a-1a14-4cfc-952b-e155a6343eb8",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2023, 11, 1, 18, 23, 52, 586, DateTimeKind.Local).AddTicks(8315),
                            ConcurrencyStamp = "1c4091a7-0b09-47c6-a538-e2755dd2f5e2",
                            Email = "visitor@example.com",
                            EmailConfirmed = true,
                            FirstName = "visitor",
                            LastName = "visitor",
                            LockoutEnabled = false,
                            NormalizedEmail = "VISITOR@EXAMPLE.COM",
                            NormalizedUserName = "VISITOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKavqH0zDgsoZpVwYIS+kmMlndxNkE0wWkiRA59F01GuaHJSQsrGMC+tbXES2EUqw==",
                            PhoneNumber = "0210888888",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b13c95b0-d26e-45d5-8145-3274c79ea2cf",
                            TwoFactorEnabled = false,
                            UserName = "visitor@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "be579afc-cad8-4cf4-afb1-7237be813e01",
                            ConcurrencyStamp = "e4f96e94-ffcb-4170-90a6-ccb78dc01ee4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "23ebadaf-bfaf-4971-a5d3-679c19809e56",
                            ConcurrencyStamp = "813f6b46-4e37-4583-bd29-1727d1342931",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "dd4650a0-b5a7-4f63-9a6c-0ac5c914965f",
                            ConcurrencyStamp = "c504f680-ef9f-4bd7-b7d9-693d59c5fd50",
                            Name = "Salesperson",
                            NormalizedName = "SALESPERSON"
                        },
                        new
                        {
                            Id = "e28c0bd7-f57d-44f7-913b-9984686e3d5e",
                            ConcurrencyStamp = "9c81a138-5bab-416d-9630-4511bf2df528",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "287ecbd5-f271-48c4-95fc-047019a2c7ff",
                            RoleId = "be579afc-cad8-4cf4-afb1-7237be813e01"
                        },
                        new
                        {
                            UserId = "ebc72d8e-0672-486c-a870-5deb6491d00b",
                            RoleId = "23ebadaf-bfaf-4971-a5d3-679c19809e56"
                        },
                        new
                        {
                            UserId = "0548a2e3-86f9-491c-9875-4874cc9bf698",
                            RoleId = "dd4650a0-b5a7-4f63-9a6c-0ac5c914965f"
                        },
                        new
                        {
                            UserId = "23b1433a-1a14-4cfc-952b-e155a6343eb8",
                            RoleId = "e28c0bd7-f57d-44f7-913b-9984686e3d5e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KiwiLadyShoes.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KiwiLadyShoes.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KiwiLadyShoes.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KiwiLadyShoes.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
